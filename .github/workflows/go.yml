name: Go CI

permissions:
  contents: write
  id-token: write
  packages: write

on:
  push:
    tags:
      - v*
    branches:
      - main
    paths:
      - 'golang/**'
      - '.github/workflows/go.yml'
  pull_request:
    paths:
      - 'golang/**'
      - '.github/workflows/go.yml'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  GOLANG_LOCATION: golang
  IMAGE_REPOSITORY: ghcr.io/synkube/app

jobs:
  file-changes:
    name: file-changes
    runs-on: ubuntu-latest
    outputs:
      golang_dirs: ${{ steps.matrix.outputs.golang_dirs }}
    steps:
      - uses: actions/checkout@v4
      - name: Get changed files
        id: changes
        uses: tj-actions/changed-files@v35

      - name: Changed files matrix
        id: matrix
        env:
          MODIFIED_FILES: ${{ steps.changes.outputs.all_modified_files }}
        run: |
          # Enable debug mode
          set -x

          # Get the list of modified files
          modified_files=($(echo "$MODIFIED_FILES" | tr " " "\n"))

          # List of golang directories
          golang_dirs=($(ls ${{ env.GOLANG_LOCATION }} | tr -d " "))

          echo "Golang directories: ${golang_dirs[@]}"

          # Array to hold changed golang directories
          changed_golang_dirs=()
          include_all_dirs=false

          for file in "${modified_files[@]}"; do
            if [[ $file =~ ${{ env.GOLANG_LOCATION }}/core/.* ]]; then
              include_all_dirs=true
              break
            fi
          done

          if [ "$include_all_dirs" = true ]; then
            changed_golang_dirs=("${golang_dirs[@]}")
          else
            for golang_dir in "${golang_dirs[@]}"; do
              for file in "${modified_files[@]}"; do
                if [[ $file =~ ${{ env.GOLANG_LOCATION }}/$golang_dir/.* ]]; then
                  changed_golang_dirs+=("$golang_dir")
                  break
                fi
              done
            done
          fi

          echo "Changed golang directories:"
          printf "%s\n" "${changed_golang_dirs[@]}"

          golang_output=$(jq -nc '[$ARGS.positional[]]' --args "${changed_golang_dirs[@]}")

          echo "golang_dirs=$golang_output" >> $GITHUB_OUTPUT

  go-build:
    runs-on: ubuntu-latest
    needs: [file-changes]
    if: ${{ needs.file-changes.outputs.golang_dirs != '[]' }}
    strategy:
      fail-fast: false
      matrix:
        golang-app: ${{ fromJSON(needs.file-changes.outputs.golang_dirs) }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: mikefarah/yq@v4.32.2

      - name: Get branch name
        id: branch-name
        uses: tj-actions/branch-names@v6

    
      - name: Bump version and push tag
        id: tag_version
        if: steps.branch-name.outputs.is_default == 'true'
        uses: mathieudutour/github-tag-action@v6.0
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          tag_prefix: ${{matrix.golang-app}}/v
          release_branches: main
          fetch_all_tags: true
        
      - name: Fetch all tags
        run: git fetch --force --tags

      # get the tag we just created
      - name: Git Fetch Unshallow
        run: git fetch


      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.21'

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Install dependencies
        working-directory: ${{ env.GOLANG_LOCATION }}/${{ matrix.golang-app }}
        run: |
          go mod tidy
          go mod download

      - name: Cache Go build
        id: cache-go-build
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/go-build
          key: ${{ runner.os }}-go-build-${{ hashFiles('**/*.go') }}
          restore-keys: |
            ${{ runner.os }}-go-build-${{ matrix.golang-app }}

      # - name: Run tests
      #   working-directory: ${{ env.GOLANG_LOCATION }}/${{ matrix.golang-app }}
      #   run: |
      #     go test -v ./...

      # - name: Build
      #   working-directory: ${{ env.GOLANG_LOCATION }}/${{ matrix.golang-app }}
      #   run: |
      #     go build -o app

      - name: Run GoReleaser
        uses: goreleaser/goreleaser-action@v6
        if: steps.branch-name.outputs.is_default == 'true'
        with:
          args: --clean
          version: '~> v2'
          workdir: ${{ env.GOLANG_LOCATION }}/${{ matrix.golang-app }}
        env:
          GITHUB_OWNER: ${{ github.repository_owner }}
          GITHUB_REPO: ${{ github.repository }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # - name: Build Docker image
      #   working-directory: ${{ env.GOLANG_LOCATION }}/${{ matrix.golang-app }}
      #   run: |
      #     docker build -t ghcr.io/${{ github.repository }}/${{ matrix.golang-app }}:${{ github.sha }} .

      # - name: Push Docker image
      #   run: docker push ghcr.io/${{ github.repository }}/${{ matrix.golang-app }}:${{ github.sha }}


      - name: Check For Docker Images
        if: steps.branch-name.outputs.is_default != 'true'
        id: image_check
        run: |
          # will be 0 if none present
          has_images=$(yq eval '.dockers != null' ${{ env.GOLANG_LOCATION }}/${{matrix.golang-app}}/.goreleaser.yml)
          echo "##[set-output name=has_images;]$(echo $has_images)"


      - name: Run GoReleaser (Snapshot)
        uses: goreleaser/goreleaser-action@v6
        if: steps.branch-name.outputs.is_default != 'true' && steps.image_check.outputs.has_images == 'true'
        with:
          args: --snapshot --clean
          version: '~> v2'
          workdir: ${{ env.GOLANG_LOCATION }}/${{ matrix.golang-app }}
        env:
          GITHUB_OWNER: ${{ github.repository_owner }}
          GITHUB_REPO: ${{ github.repository }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Get Project Name
        id: project_id
        run: |
          project_name=$(yq '.project_name' ${{ env.GOLANG_LOCATION }}/${{matrix.golang-app}}/.goreleaser.yml)
          echo "##[set-output name=project_name;]$(echo $project_name)"

      - name: Push Docker Images (Snapshot)
        if: steps.branch-name.outputs.is_default != 'true' && steps.image_check.outputs.has_images == 'true'
        run: |
          docker_image=$(yq '.dockers | length' ${{ env.GOLANG_LOCATION }}/${{matrix.golang-app}}/dist/config.yaml)
          if [ $docker_image -eq "0" ]; then
            echo "No docker images to push"
            exit 0
          fi
          docker push $IMAGE_REPOSITORY/$IMAGE_NAME:${GITHUB_SHA}
        env:
          IMAGE_NAME: ${{ steps.project_id.outputs.project_name }}
